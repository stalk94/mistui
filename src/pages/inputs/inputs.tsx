import { Section, Grid as ButtonGrid, variantsText } from '../helpers';
import { colors, sizes, variants, colorsCustom } from '../helpers';
import { BaseInput } from '@/components/inputs';



// ! –∫–æ–¥ –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–µ—Ç
export default function InfoInput() {
    return (
        <div className="p-6 space-y-8 ">
            {/* default */}
            <Section title="BaseInput" description="–∫–Ω–æ–ø–∫–∞"
                code={`<BaseInput type='text' size='sm' placeholder='placeholder'></BaseInput>`}
            >
                <div className="flex justify-center">
                    <BaseInput
                        type='text'
                        size='sm'
                        placeholder='placeholder'
                        labelLeft={'üîçÔ∏é'}
                        labelTop={'label'}
                    />
                </div>
            </Section>

            {/* variants */}
            <Section
                title="BaseInput variants"
                description="—Ä–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏"
                code={variants
                    .map((variant) => `<BaseInput variant="${variant}">${variant}</BaseInput>`)
                    .join('\n')
                }
            >
                <ButtonGrid>
                    {variants.map((variant, i) => (
                        <BaseInput 
                            key={i} 
                            variant={variant}
                            type='text'
                            size='sm'
                            placeholder={variant}
                        />
                    ))}
                </ButtonGrid>
            </Section>

            {/* colors */}
            <Section
                title="BaseInput base variants theme colors"
                description="—Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞"
                code={colors
                    .map((color) => `<BaseInput color="${color}">'${color}'</BaseInput>`)
                    .join('\n')}
            >
                <ButtonGrid>
                    {colors.map((color, i) => (
                        <BaseInput 
                            key={i} 
                            variant='outline'
                            color={color}
                            type='text'
                            size='sm'
                            placeholder={color}
                        />
                    ))}
                </ButtonGrid>
            </Section>

            {/* sizes */}
            <Section
                title="Button sizes"
                description="—Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã"
                code={sizes
                    .map((size) => `<Button size="${size}" shadow="sm">${size}</Button>`)
                    .join('\n')}
            >
                <ButtonGrid>
                    {sizes.map((size) => (
                        <BaseInput 
                            key={size} 
                            size={size} 
                            shadow="sm"
                            labelTop={size}
                            placeholder={size}
                            value={size === 'xs' ? 'easter egg' : ''}
                        />
                    ))}
                </ButtonGrid>
            </Section>

            {/* custom color */}
            <Section
                title="BaseInput custom color"
                description="—Ü–≤–µ—Ç–∞ –∏ —Å—Ç–∏–ª–∏"
                code={variants
                    .map(
                        (variant, i) =>
                            `<BaseInput variant="${variant}" color="${colorsCustom[i]}">${variant}</BaseInput>`
                    )
                    .join('\n')}
            >
                <ButtonGrid>
                    {variants.map((variant, i) => (
                        <BaseInput
                            key={variant}
                            variant={variant}
                            size='sm'
                            color={colorsCustom[i]}
                            placeholder={colorsCustom[i]}
                        >
                           
                        </BaseInput>
                    ))}
                </ButtonGrid>
            </Section>

            {/* label left */}
            <Section
                title="BaseInput label left"
                description="—Ü–≤–µ—Ç–∞ –∏ —Å—Ç–∏–ª–∏"
                code={variants
                    .map(
                        (variant, i) =>
                            `<BaseInput variant="${variant}" color="${colorsCustom[i]}">${variant}</BaseInput>`
                    )
                    .join('\n')}
            >
                <ButtonGrid>
                    {variants.map((variant, i) => (
                        <BaseInput
                            key={variant}
                            variant={variant}
                            color={colors[i]}
                            size='sm'
                            
                            placeholder={colorsCustom[i]}
                            labelLeft={'üîçÔ∏é'}
                        >
                           
                        </BaseInput>
                    ))}
                </ButtonGrid>
            </Section>

             <Section
                title="BaseInput label right"
                description="—Ü–≤–µ—Ç–∞ –∏ —Å—Ç–∏–ª–∏"
                code={variants
                    .map(
                        (variant, i) =>
                            `<BaseInput variant="${variant}" color="${colorsCustom[i]}">${variant}</BaseInput>`
                    )
                    .join('\n')}
            >
                <ButtonGrid>
                    {variants.map((variant, i) => (
                        <BaseInput
                            key={variant}
                            variant={variant}
                            color={colors[i]}
                            size='sm'
                            
                            placeholder={colorsCustom[i]}
                            labelRight={'üîçÔ∏é'}
                        >
                           
                        </BaseInput>
                    ))}
                </ButtonGrid>
            </Section>

            <Section
                title="BaseInput label top"
                description="—Ü–≤–µ—Ç–∞ –∏ —Å—Ç–∏–ª–∏"
                code={variants
                    .map(
                        (variant, i) =>
                            `<BaseInput variant="${variant}" color="${colorsCustom[i]}">${variant}</BaseInput>`
                    )
                    .join('\n')}
            >
                <ButtonGrid>
                    {variants.map((variant, i) => (
                        <BaseInput
                            key={variant}
                            variant={variant}
                            color={colors[i]}
                            size='sm'
                            
                            placeholder={colorsCustom[i]}
                            labelTop={variant +' '+ colors[i]}
                        >
                           
                        </BaseInput>
                    ))}
                </ButtonGrid>
            </Section>
            
             <Section
                title="BaseInput label mixed"
                description="—Ü–≤–µ—Ç–∞ –∏ —Å—Ç–∏–ª–∏"
                code={variants
                    .map(
                        (variant, i) =>
                            `<BaseInput variant="${variant}" color="${colorsCustom[i]}">${variant}</BaseInput>`
                    )
                    .join('\n')}
            >
                <ButtonGrid>
                    {variants.map((variant, i) => (
                        <BaseInput
                            key={variant}
                            variant={variant}
                            color={colors[i]}
                            size='sm'
                            
                            placeholder={colorsCustom[i]}
                            labelLeft={'üîçÔ∏é'}
                            labelRight={'üîçÔ∏é'}
                            labelTop={variant +' '+ colors[i]}
                        >
                           
                        </BaseInput>
                    ))}
                </ButtonGrid>
            </Section>
        </div>
    );
}


InfoInput.meta = {
    children: {
        values: ['React.ReactNode'],
        type: 'node',
        description: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞. –ú–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ JSX-—ç–ª–µ–º–µ–Ω—Ç–æ–º.',
    },
    variant: {
        values: Object.keys(variants),
        type: 'enum',
        description: '–í–∞—Ä–∏–∞–Ω—Ç —Ç–µ–∫—Å—Ç–∞, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π —Å—Ç–∏–ª—å –∏ —Ä–∞–∑–º–µ—Ä.',
    },
    className: {
        values: ['string'],
        type: 'string',
        description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ CSS –∫–ª–∞—Å—Å—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.',
    },
    style: {
        values: ['React.CSSProperties'],
        type: 'object',
        description: '–ò–Ω–ª–∞–π–Ω-—Å—Ç–∏–ª–∏, –ø—Ä–∏–º–µ–Ω—è–µ–º—ã–µ –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É.',
    },
    fontStyle: {
        values: ['normal', 'italic'],
        type: 'enum',
        description: '–°—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞: –æ–±—ã—á–Ω—ã–π –∏–ª–∏ –∫—É—Ä—Å–∏–≤.',
    },
    fontFamily: {
        values: Object.keys(variants),
        type: 'enum',
        description: '–ù–∞–∑–≤–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ –∏–∑ –Ω–∞–±–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–º–µ–π—Å—Ç–≤.',
    },
    fontSize: {
        values: ['string', 'number'],
        type: 'union',
        description: '–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16 –∏–ª–∏ "1.2rem").',
    },
    shadow: {
        values: ['xs', 'sm', 'md', 'lg', 'xl'],
        type: 'enum',
        description: '–†–∞–∑–º–µ—Ä —Ç–µ–Ω–∏ —Ç–µ–∫—Å—Ç–∞.',
    },
    colorShadow: {
        values: ['string'],
        type: 'string',
        description: '–¶–≤–µ—Ç —Ç–µ–Ω–∏ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "rgba(0,0,0,0.3)").',
    }
}