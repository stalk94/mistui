import { Typography } from '@/components/text';
import { translateText } from '@/editor/helpers/translate';
import { useEffect, useState } from 'react';


const components = {
    ThemeProvider: `
        üé® The ThemeProvider component wraps your entire app and is required for all MistUI components to function correctly. To customize the theme, pass a config object using the 'theme' prop, created with createTheme().
    `,
    AlertProvider: `
        üîî The AlertProvider component sets up a global alert system using React context. It allows you to trigger styled alert messages (toasts) from anywhere in your app using the useAlert() hook.  
    `,
    Typography: `
       ‚úèÔ∏è The Typography component follows the Material UI concept but is adapted to Tailwind CSS conventions and uses the text-* utility classes family.
    `,
    Link: `
        üîó The Link component is an extension of the base [Typography] component, designed specifically for navigation purposes with optional support for custom routing logic.
    `,
    MarqueText: `
        üèÉ‚Äç‚ôÇÔ∏è MarqueeText is a visual component for creating a continuous scrolling text (marquee effect) with customizable direction, speed, and optional pause on hover. It is fully compatible with Typography, from which it inherits visual styles and properties.
    `,

    Button: `
        
    `,
    IconButton: `
        
    `,
    GroupButtons: `
        
    `,
    GroupButtonFiltre: `
        
    `,

    TextInput: `
        
    `,
    NumberInput: `
        
    `,
    ColorPicker: `
        
    `,
    Radio: `
        
    `,
    Switch: `
        
    `,
    CheckBox: `
        
    `,
    Slider: `
        
    `,
    TextArea: `
        
    `,
    Date: `
        
    `,
    Time: `
        
    `,
    File: `
        
    `,
    Autocomplete: `
        
    `,
    Select: `
        
    `,

    Tabs: `
        
    `,
    Breadcrumbs: `
        
    `,
    BottomNavigation: `
        
    `,
    Menu: `
        
    `,

    Avatar: `
        Avatars are used to show a thumbnail representation of an individual or business in the interface.
        Avatars are found throughout with uses in everything from tables to dialog menus.
    `,
    AvatarGroup: `
        
    `,
    Indicator: `
        
    `,
    Badge: `
        
    `,
    List: `
        
    `,

    SimpleTable: `
        
    `,
    DataTable: `
        
    `,

    Divider: `
        
    `,
    Splitter: `
        
    `,
    Collapse: `
        
    `,
    Accordion: `
        
    `,
    Overflow: `
        
    `,

    Footer: `
        
    `,
    Hero: `
        
    `,
    AppBar: `
        
    `,
    Chat: `
        
    `,
    Stat: `
        
    `,

    Alert: `
        
    `,
    Tooltip: `
        
    `,
    Modal: `
        
    `,
    Popover: `
        
    `,
    Drawer: `
        
    `,

    Card: `
        
    `,
    Promo: `
        
    `,
    VerticalCarousel: `
        
    `,
    HorizontalCarousel: `
        
    `,
    Skeleton: `
        –û—Ç–æ–±—Ä–∞–∑–∏—Ç–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏.
        –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞—à–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–µ —Å—Ä–∞–∑—É. –í—ã –º–æ–∂–µ—Ç–µ —É–ª—É—á—à–∏—Ç—å –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ–º—É—é –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∫–µ–ª–µ—Ç—ã. –°–æ–∑–¥–∞—ë—Ç—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ, —á—Ç–æ –≤—Å—ë –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –∞ –∑–∞—Ç–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    `
}


export default function Head({ preview }) {
    const [current, setCurrent] = useState<string>(components[preview] ?? 'Description in development');
    const lang = globalStore.lang.use();

    useEffect(()=> {
        const cur: string = components[preview];
        
        if (cur && cur.trim().length > 0) {
            translateText(cur, lang)
                .then(setCurrent)
        }
        else setCurrent('Description in development!');
    }, [preview, lang]);


    return(
        <div className=''>
            <Typography variant='body2' color='white'>
                { current }
            </Typography>
        </div>
    );
}