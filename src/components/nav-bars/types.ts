type NavLinkItem = {
    id: string | number
    icon?: React.ReactElement
    divider?: any
    style?: React.CSSProperties
    label: string | React.ReactElement
}

export type BarProps = {
    orientation?: 'horizontal' | 'vertical'
    style?: React.CSSProperties
    children?: React.ReactNode | string
    start?: React.ReactNode | string
    end?: React.ReactNode | string
    className?: HTMLDivElement['className']
}


export type SidebarMenuProps = {
    collapsed: boolean
    onChange?: (item: NavLinkItem)=> void
    items: NavLinkItem[]
    style?: React.CSSProperties
    isFocusSelected?: boolean 
    selected?: any
    listStyle?: React.CSSProperties
}
export type LeftNavigationProps = SidebarMenuProps & {
    type: 'box' | 'drawer'
    end?: NavLinkItem[]
    start?: NavLinkItem[]
    /** –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—ã–¥–µ–ª–ª–µ–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º —Ç–µ–∫—É—à–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç */
    isFocusSelected?: boolean 
}


export type SideBarAndToolPanelProps = {
    /** —Å–ª–æ—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏ */
    schemaNavBar: {
        start?: NavLinkItem[]
        items: NavLinkItem[]
        /** –Ω–∏–∂–Ω—è—è —Å—É–±–ø–∞–Ω–µ–ª—å–∫–∞, –≤—Å–µ–≥–¥–∞ –ø–æ–≤–µ—Ä—Ö –±–∞–∑–æ–≤–æ–π */
        end?: NavLinkItem[]
    }
    /** ‚¨áÔ∏è –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å–∫–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤(tool) */
    end?: React.ReactNode
    /** —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */
    top?: React.ReactNode
    /** ‚¨ÜÔ∏è –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å–∫–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤(tool) */
    start?: React.ReactNode
    /** üíª –ö–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏(–ø—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å) */
    children: React.ReactNode
    /** üî• –Ω–∞–∂–∞—Ç —ç–ª–µ–º–µ–Ω—Ç –±–æ–∫–æ–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */
    onChangeNavigation?: (item: NavLinkItem)=> void
    /** üìè –®–∏—Ä–∏–Ω–∞ —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏ (–±–µ–∑ —É—á–µ—Ç–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏) */
    width?: string | number
    style?: React.CSSProperties
    selected?: any
}
